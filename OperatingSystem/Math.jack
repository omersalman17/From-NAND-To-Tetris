// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array two_to_the;
    static int second_output;

    /** Initializes the library. */
    function void init() {
        var int index;
        var int result;
        let second_output = 0; 
        let two_to_the = Array.new(16);
        let index = 0;
        let result = 1;
        let two_to_the[0] = 1;
        let two_to_the[1] = 2;
        let two_to_the[2] = 4;
        let two_to_the[3] = 8;
        let two_to_the[4] = 16;
        let two_to_the[5] = 32;
        let two_to_the[6] = 64;
        let two_to_the[7] = 128;
        let two_to_the[8] = 256;
        let two_to_the[9] = 512;
        let two_to_the[10] = 1024;
        let two_to_the[11] = 2048;
        let two_to_the[12] = 4096;
        let two_to_the[13] = 8192;
        let two_to_the[14] = 16384;
        let two_to_the[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shifted_x;
        var int index;
        let sum = 0;
        let shifted_x = x;
        let index = 0;
        while (index < 16){
            if (Math.bit(y, index) = 1){
                let sum = sum + shifted_x;
            }
            let shifted_x = shifted_x + shifted_x;
            let index = index + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int abs_x;
        var int abs_y;
        var int result;
        var int two_times_y;
        let abs_x = Math.abs(x);
        let abs_y = Math.abs(y);
        let second_output = 0;
        let result = Math.divide_helper(abs_x, abs_y);
        if (((x < 0) & (y > 0)) | ((x > 0) & ( y < 0))){
            return -result;
        }
        return result;
    }

    /** A helper function for the divide operation*/
    function int divide_helper(int x, int y){
        var int q;
        if ((y > x) | (y < 0)){
                return 0;
        }
        let q = Math.divide_helper(x,  y + y);
        let q = q + q;
        if ((x -  second_output) < y){
            return q;
        }
        let second_output = second_output + y;
        return q + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y;
        var int j;
        var int result;
        let y = 0;
        let j = 7;
        while ( j > -1){
            let result =  y + two_to_the[j];
            let result = result * result;
            if(((result < x) | (result = x)) & (result > 0)){
                let y = y + two_to_the[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b)
        {
            return b;
        }
        else{
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b)
        {
            return a;
        }
        else{
            return b;
        }
    }
    /** Returns the i'th bit of a number. */
    function int bit(int x, int i){
        if (~((x & two_to_the[i]) = 0)){
            return 1;
        }
        return 0;
    }

    /** Returns the 2^i value. */
    function int get_two_to_the(int index){
        return two_to_the[index];
    }
}
