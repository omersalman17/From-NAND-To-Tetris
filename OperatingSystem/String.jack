// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int current_length;
    field Array current_string;
    field int max_length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0){
            let current_string = Array.new(maxLength);
        }
        let max_length = maxLength;
        let current_length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (max_length > 0){
            do Array.dispose(current_string);
        }   
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return current_length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return current_string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let current_string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (current_length < max_length){
            let current_string[current_length] = c;
            let current_length = current_length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if ( current_length > 0){
            let current_length = current_length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int int_to_return;
        var int index;
        var int current_int;
        var bool negative;
        let index = 0;
        let int_to_return = 0;
        let negative = false;
        // check if first is minus
        if (current_string[index] = 45){
            let negative = true;
            let index = index + 1;
        }
        while (((current_string[index] > 47) & (current_string[index] < 58)) & (index < current_length)){
            let current_int = current_string[index] - 48;
            let int_to_return = int_to_return * 10 + current_int;
            let index = index + 1;
        }
        if (negative){
            return -int_to_return;
        }
        return int_to_return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let current_length = 0; 
        if (val < 0){
            do appendChar(45);
            let val = -val;
        }
        do int_to_string(val);
        return;
    }
    
    /** Recursive conversion of int to string algorithm that was shown in class.*/
    method String int_to_string(int val){
        var int last_digit;
        var int value_divided_by_ten;
        var int c;
        let value_divided_by_ten = (val/10);
        let last_digit = val - (value_divided_by_ten*10);
        let c = last_digit + 48;
        if ( val < 10){
            do appendChar(c);
            return this;
        }
        do int_to_string(value_divided_by_ten);
        do appendChar(c);
        return this;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
