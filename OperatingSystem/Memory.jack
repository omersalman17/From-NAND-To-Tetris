// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array free_list;
    static Array heap;
    

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let free_list = 2048; // heapBase
        let heap = 2048;
        let free_list[0] = 0; // next
        let free_list[1] = 14335; // length
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array current_segment_address;
        var Array returned_block_address;
        var int current_segment_length;

        // check if size is legit
        if ((size > 14333) | (size < 0)){
             // error
             return 0;
        }

        let current_segment_address = free_list;
        while ((current_segment_address[1] < (size + 2)) &  (~(current_segment_address[0] = 0))){
            let current_segment_address = current_segment_address[0];
        }

        let current_segment_length = current_segment_address[1];
        if (current_segment_length < (size + 2)){
            // error
            return 0;
        }
        // todo check this
        let returned_block_address = current_segment_address + current_segment_length - size-2;

        // length = size
        let returned_block_address[1] = size;
        // next = 0
        let returned_block_address[0] = 0;
        // update current segment length
        let current_segment_address[1] = current_segment_length - size - 2;
        return returned_block_address + 2;

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array current_block_address;
        let current_block_address = free_list;
        while (~(current_block_address[0] = 0)){
            let current_block_address = current_block_address[0];
        }
        let current_block_address[0] = o-2;
        return;
    }    
}
